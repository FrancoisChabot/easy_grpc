// This code was generated by the easy_grpc protoc plugin.
#ifndef EASY_GRPC_test_INCLUDED_H
#define EASY_GRPC_test_INCLUDED_H

#include "test.pb.h"

#include "easy_grpc/ext_protobuf/gen_support.h"

#include <memory>

namespace tests {

class TestService {
public:
  using service_type = TestService;

  virtual ~TestService() {}

  static const char * kTestService_TestMethod_name;

  virtual ::easy_grpc::Future<::tests::TestReply> TestMethod(const ::tests::TestRequest&) = 0;

  class Stub_interface {
  public:
    virtual ~Stub_interface() {}

    virtual ::easy_grpc::Future<::tests::TestReply> TestMethod(::tests::TestRequest, ::easy_grpc::client::Call_options={}) = 0;
  };

  class Stub final : public Stub_interface {
  public:
    Stub(::easy_grpc::client::Channel*, ::easy_grpc::Completion_queue* = nullptr);

    ::easy_grpc::Future<::tests::TestReply> TestMethod(::tests::TestRequest, ::easy_grpc::client::Call_options={}) override;

  private:
    ::easy_grpc::client::Channel* channel_;
    ::easy_grpc::Completion_queue* default_queue_;

    void* TestMethod_tag_;
  };

  template<typename ImplT>
  static ::easy_grpc::server::Service_config get_config(ImplT& impl) {
    ::easy_grpc::server::Service_config result("TestService");

    result.add_method<::tests::TestRequest, ::tests::TestReply>(kTestService_TestMethod_name, [&impl](::tests::TestRequest req){return impl.TestMethod(std::move(req));});

    return result;
  }
};

} // namespacetests

#endif
