// This code was generated by the easy_grpc protoc plugin.
#ifndef EASY_GRPC_hello_INCLUDED_H
#define EASY_GRPC_hello_INCLUDED_H

#include "hello.pb.h"

#include "easy_grpc/ext_protobuf/gen_support.h"

#include <memory>

namespace pkg {

class HelloService {
public:
  using service_type = HelloService;

  virtual ~HelloService() {}

  static const char * kHelloService_SayHello_name;
  static const char * kHelloService_SayBye_name;

  virtual ::easy_grpc::Future<::pkg::HelloReply> SayHello(const ::pkg::HelloRequest&) = 0;
  virtual ::easy_grpc::Future<::pkg::HelloReply> SayBye(const ::pkg::HelloRequest&) = 0;

  class Stub_interface {
  public:
    virtual ~Stub_interface() {}

    virtual ::easy_grpc::Future<::pkg::HelloReply> SayHello(::pkg::HelloRequest, ::easy_grpc::client::Call_options={}) = 0;
    virtual ::easy_grpc::Future<::pkg::HelloReply> SayBye(::pkg::HelloRequest, ::easy_grpc::client::Call_options={}) = 0;
  };

  class Stub final : public Stub_interface {
  public:
    Stub(::easy_grpc::client::Channel*, ::easy_grpc::Completion_queue* = nullptr);

    ::easy_grpc::Future<::pkg::HelloReply> SayHello(::pkg::HelloRequest, ::easy_grpc::client::Call_options={}) override;
    ::easy_grpc::Future<::pkg::HelloReply> SayBye(::pkg::HelloRequest, ::easy_grpc::client::Call_options={}) override;

  private:
    ::easy_grpc::client::Channel* channel_;
    ::easy_grpc::Completion_queue* default_queue_;

    void* SayHello_tag_;
    void* SayBye_tag_;
  };

  template<typename ImplT>
  static ::easy_grpc::server::Service_config get_config(ImplT& impl) {
    ::easy_grpc::server::Service_config result("HelloService");

    result.add_method<::pkg::HelloRequest, ::pkg::HelloReply>(kHelloService_SayHello_name, [&impl](::pkg::HelloRequest req){return impl.SayHello(std::move(req));});
    result.add_method<::pkg::HelloRequest, ::pkg::HelloReply>(kHelloService_SayBye_name, [&impl](::pkg::HelloRequest req){return impl.SayBye(std::move(req));});

    return result;
  }
};

} // namespacepkg

#endif
