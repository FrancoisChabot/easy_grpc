// This code was generated by the easy_grpc protoc plugin.

#include "hello.egrpc.pb.h"

namespace pkg {

// ********** HelloService ********** //

const char* HelloService::kHelloService_SayHello_name = "/pkg.HelloService/SayHello";
const char* HelloService::kHelloService_SayBye_name = "/pkg.HelloService/SayBye";

HelloService::Stub::Stub(::easy_grpc::client::Channel* c, ::easy_grpc::Completion_queue* default_queue)
  : channel_(c), default_queue_(default_queue ? default_queue : c->default_queue())
  , SayHello_tag_(c->register_method(kHelloService_SayHello_name))
  , SayBye_tag_(c->register_method(kHelloService_SayBye_name)) {}

// SayHello
::easy_grpc::Future<::pkg::HelloReply> HelloService::Stub::SayHello(::pkg::HelloRequest req, ::easy_grpc::client::Call_options options) {
  if(!options.completion_queue) { options.completion_queue = default_queue_; }
  return ::easy_grpc::client::start_unary_call<::pkg::HelloReply>(channel_, SayHello_tag_, std::move(req), std::move(options));
};

// SayBye
::easy_grpc::Future<::pkg::HelloReply> HelloService::Stub::SayBye(::pkg::HelloRequest req, ::easy_grpc::client::Call_options options) {
  if(!options.completion_queue) { options.completion_queue = default_queue_; }
  return ::easy_grpc::client::start_unary_call<::pkg::HelloReply>(channel_, SayBye_tag_, std::move(req), std::move(options));
};

} // namespacepkg

